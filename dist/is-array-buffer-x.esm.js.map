{"version":3,"sources":["../src/is-array-buffer-x.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,YAAP,MAAyB,kBAAzB;AACA,OAAO,cAAP,MAA2B,qBAA3B;AACA,OAAO,wBAAP,MAAqC,sCAArC;AACA,OAAO,WAAP,MAAwB,iBAAxB;AAEA,IAAM,OAAO,GAAG,OAAO,WAAP,KAAuB,UAAvC;AACA,IAAM,OAAO,GAAG,sBAAhB;AACA,IAAI,OAAO,GAAG,KAAd;;AAEA,IAAI,OAAJ,EAAa;AACX,MAAI,cAAJ,EAAoB;AAClB;AACA,QAAM,UAAU,GAAG,wBAAwB,CAAC,WAAW,CAAC,SAAb,EAAwB,YAAxB,CAA3C;;AAEA,QAAI,UAAU,IAAI,OAAO,UAAU,CAAC,GAAlB,KAA0B,UAA5C,EAAwD;AACtD,UAAI,GAAG,GAAG,OAAO,CAAC,YAAM;AAAA;;AACtB;AACA,eAAO,IAAI,WAAJ,CAAgB,CAAhB,CAAP;AACD,OAHgB,YAAjB;;AAKA,UAAI,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,YAAY,CAAC,GAAG,CAAC,KAAL,CAAvC,EAAoD;AAClD,QAAA,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,KAAjB,EAAwB,UAAU,CAAC,GAAnC,CAAN;AACA,QAAA,OAAO,GAAG,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,OAAO,GAAG,CAAC,KAAX,KAAqB,QAA5C,IAAwD,UAAU,CAAC,GAA7E;AACD;AACF;AACF;AACF;AAED;;;;;;;;;AAOA,eAAe,SAAS,aAAT,CAAuB,MAAvB,EAA+B;AAC5C,MAAI,OAAO,KAAK,KAAZ,IAAqB,YAAY,CAAC,MAAD,CAAZ,KAAyB,KAAlD,EAAyD;AACvD,WAAO,KAAP;AACD;;AAED,MAAI,OAAO,KAAK,KAAhB,EAAuB;AACrB,WAAO,WAAW,CAAC,MAAD,CAAX,KAAwB,OAA/B;AACD;;AAED,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,OAArB,CAAf;AAEA,SAAO,MAAM,CAAC,KAAP,KAAiB,KAAjB,IAA0B,OAAO,MAAM,CAAC,KAAd,KAAwB,QAAzD;AACD","file":"is-array-buffer-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport isObjectLike from 'is-object-like-x';\nimport hasToStringTag from 'has-to-string-tag-x';\nimport getOwnPropertyDescriptor from 'object-get-own-property-descriptor-x';\nimport toStringTag from 'to-string-tag-x';\n\nconst hasABuf = typeof ArrayBuffer === 'function';\nconst aBufTag = '[object ArrayBuffer]';\nlet bLength = false;\n\nif (hasABuf) {\n  if (hasToStringTag) {\n    /* eslint-disable-next-line compat/compat */\n    const descriptor = getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength');\n\n    if (descriptor && typeof descriptor.get === 'function') {\n      let res = attempt(() => {\n        /* eslint-disable-next-line compat/compat */\n        return new ArrayBuffer(4);\n      });\n\n      if (res.threw === false && isObjectLike(res.value)) {\n        res = attempt.call(res.value, descriptor.get);\n        bLength = res.threw === false && typeof res.value === 'number' && descriptor.get;\n      }\n    }\n  }\n}\n\n/**\n * Determine if an `object` is an `ArrayBuffer`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is an `ArrayBuffer`,\n *  else false`.\n */\nexport default function isArrayBuffer(object) {\n  if (hasABuf === false || isObjectLike(object) === false) {\n    return false;\n  }\n\n  if (bLength === false) {\n    return toStringTag(object) === aBufTag;\n  }\n\n  const result = attempt.call(object, bLength);\n\n  return result.threw === false && typeof result.value === 'number';\n}\n"]}